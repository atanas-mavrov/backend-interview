// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Atanas Mavrov"
        },
        "license": {
            "name": "GPL3",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Return help data",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/"
                ],
                "summary": "Get root URL",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/patients": {
            "get": {
                "description": "Get the patients with the highest rating by geographical coordinates",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/patients"
                ],
                "summary": "Top rated patients",
                "parameters": [
                    {
                        "type": "string",
                        "default": "32.109333,34.855499",
                        "description": "latitude,longitude",
                        "name": "location",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/patients.Patient"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "patients.Patient": {
            "type": "object",
            "properties": {
                "acceptedOffers": {
                    "type": "number"
                },
                "age": {
                    "type": "number"
                },
                "averageReplyTime": {
                    "type": "number"
                },
                "canceledOffers": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/patients.location"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "number"
                }
            }
        },
        "patients.location": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "string",
                    "example": "0"
                },
                "longitude": {
                    "type": "string",
                    "example": "0"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "localhost:8000",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Blink backend interview REST API",
	Description: "This is a very simple project to ordering a list of patients according to certain criteria",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
